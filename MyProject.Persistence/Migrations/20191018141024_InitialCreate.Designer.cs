// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProject.Persistence;

namespace MyProject.Persistence.Migrations
{
    [DbContext(typeof(MyProjectDbContext))]
    [Migration("20191018141024_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyProject.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Appointment");
                });

            modelBuilder.Entity("MyProject.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");
                });

            modelBuilder.Entity("MyProject.Persistence.SeedAppointment", b =>
                {
                    b.HasBaseType("MyProject.Domain.Entities.Appointment");

                    b.HasDiscriminator().HasValue("SeedAppointment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87d7c60e-8fe1-4a19-80e6-40dbca019485"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(3523),
                            CustomerId = new Guid("971f3745-fc7b-465a-9984-7c72747480b5"),
                            Date = new DateTime(2019, 11, 10, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(3051)
                        },
                        new
                        {
                            Id = new Guid("982ea09b-0a22-4e98-80a1-d172ac89e38a"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(4004),
                            CustomerId = new Guid("971f3745-fc7b-465a-9984-7c72747480b5"),
                            Date = new DateTime(2019, 10, 5, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(3994)
                        },
                        new
                        {
                            Id = new Guid("0f5031e8-497e-45f5-9662-c4e0c91c2e41"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(4015),
                            CustomerId = new Guid("999369bf-6c17-4575-8087-7445d0f47ba0"),
                            Date = new DateTime(2019, 10, 31, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(4012)
                        },
                        new
                        {
                            Id = new Guid("4df23fae-2a32-4c50-a697-45f8bcc7bf4d"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(4021),
                            CustomerId = new Guid("28dcee5f-0509-4e04-9162-ac8a3bd601ca"),
                            Date = new DateTime(2019, 12, 25, 18, 15, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 331, DateTimeKind.Local).AddTicks(4018)
                        });
                });

            modelBuilder.Entity("MyProject.Persistence.SeedCustomer", b =>
                {
                    b.HasBaseType("MyProject.Domain.Entities.Customer");

                    b.HasDiscriminator().HasValue("SeedCustomer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("971f3745-fc7b-465a-9984-7c72747480b5"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 326, DateTimeKind.Local).AddTicks(5407),
                            DateOfBirth = new DateTime(1980, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 328, DateTimeKind.Local).AddTicks(6586),
                            Name = "Daniel",
                            Surname = "Hoffman"
                        },
                        new
                        {
                            Id = new Guid("999369bf-6c17-4575-8087-7445d0f47ba0"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 328, DateTimeKind.Local).AddTicks(7167),
                            DateOfBirth = new DateTime(1977, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 328, DateTimeKind.Local).AddTicks(7177),
                            Name = "Albert",
                            Surname = "Heisenower"
                        },
                        new
                        {
                            Id = new Guid("28dcee5f-0509-4e04-9162-ac8a3bd601ca"),
                            CreationDate = new DateTime(2019, 10, 18, 16, 10, 24, 328, DateTimeKind.Local).AddTicks(7185),
                            DateOfBirth = new DateTime(1960, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdated = new DateTime(2019, 10, 18, 16, 10, 24, 328, DateTimeKind.Local).AddTicks(7188),
                            Name = "Stephen",
                            Surname = "King"
                        });
                });

            modelBuilder.Entity("MyProject.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MyProject.Domain.Entities.Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
